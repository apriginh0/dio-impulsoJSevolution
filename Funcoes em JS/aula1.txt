Estrutura
Definição comum de uma função:

function nome(parametros){
   // instruções
   return; // valor de retorno
}

Variáveis criadas dentro de uma função apenas podem ser utilizadas dentro dela.
Quando invocamos o " return", a função para de ser executada.

Função Anônima
Funções que representam expresões:

cons soma = function(a, b){
   return a + b;
}
soma(1, 2) // 3
soma(5, 4) // 9

Uma variável pode armazenar uma função.

Função Autoinvocável
IIFE(Immediately Invoked Function Expression)

(
   function(){
      let name = "Diego Aprigio"
      return name;
   }
)();
// Diego Aprigio

Uma função anônima entre parênteses, seguida por outro par de parênteses,
que representa sua chamada. Também pode se rutilizada com parâmetros ou
armazenada em uma variável.

Callbacks
Uma função passada como argumento para outra função.

const calc = function(operacao, num1, num2){
   return operacao(num1, num2);
}
const soma = function(num1, num2){
   return num1 + num2;
}
const sub = function(num1, num2){
   return num1 - num2;
}
const resultSoma = calc(soma, 1, 2);
const resultSub = calc(sub, 1, 2);

console.log(resultSoma); // 3
console.log(resultSub);  // -1

Utilizando callbacks, você tem maior controle da ordem de chamada.