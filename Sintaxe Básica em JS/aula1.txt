Javascript é uma linguagem de programação de alto nível, que integra o
desenvolvimento de apps e páginas web.
É uma das linguagens de programação mais usada no mundo do desenvolvimento.

Como surgiu?
Em 1995 o programador Brendan Eich que trabalhava na Netscape, implementou uma
linguagem de programação chamada Mocha, depois o nome mudou para LiveScript, mas
na época a linguagem Java era muito popular, então mudara LiveScript para
Javascript como jogada de marketing.

Para quê serve?
Para criar scripts dinâmicos que realizam a interação de apps ou páginas web.
Imagine que o HTML é a estrutura, o CSS é o design, o Javascript é a parte
interativa do desenvolvimento.

Onde usar?
Podemos usar o Javascript de várias formas, seu uso mais comum se dá no
desenvolvimento de apps e páginas web, juntamente com as linguagens HTML e CSS.

Tipagem?
A tipagem funciona como uma regra de uso de dado, quanto mais forte a tipagem,
mais obrigatório é a declaração do tipo de dado.
A tipagem em Javascript é fraca, a declaração dos dados acontece de modo dinâmico.
Ex: Ao criarmos uma variável com valor entre aspar ("valor"), o Javascript já
converte o dados para o tipo String.
Primitivos: Boolean, null, undefined, Number, String, Array, Object, Function.

O que são variáveis?
São dados que variam. Existem 3 modos de declarar:
var - escopo global e local, pode ter seu valor alterado, se não tiver um
valor inicial será tratada como null;
let - escopo local de bloco, pode ter seu valor alterado, se não tiver um
valor inicial será tratada como null;
const - escopo local de bloco, somente leitura, o valor inicial é obrigatório
e não pode ser alterado;

ESCOPO
O escopo em JavaScript define a limitação e visibilidade de um bloco de código.
Escopo global - quando a variável é declarada fora de qualquer bloco, sua
visibilidade fica disponível em todo o código.
Escopo local - quando a variável é declarada dentro de um bloco, sua
visibilidade pode ficar disponível ou não.

Regras de uso de variáveis
iniciar com letras, underscore_ ou cifrão $; Não iniciar com número.
Ex: var 1nome [errado]
    var nome  [certo]
Não usar espaços(use o camelCase ou _);
Ex: var nome completo [errado]
    var nomeCompleto  [certo]
Não usar palavras reservadas;
Ex: var function [errado]
Declarar variáveis no topo do bloco de código.
Atribuição: =
Comparação: ==
Igualdade(Comparação+Tipo): ===

Operadores Aritiméticos
+ adição
- subtração
* multiplicação
/ divisão real
% divisão inteira(modulo)
** potenciação

Operadores Relacionais
São tipos de operadores que consultam a relação entre valores.
> maior que;
< menor que;
>= maior igual a;
<= menor igual a;

Operadores Lógicos
São tipos de operadores que consultam valores lógicos.
&& - "e" - considera que todos os valore sejam true;
|| - "ou" - considera que qualquer valore seja true;
! - "não" - inverte o valor de true para false ou vice-versa;

Vetores ou Arrays
São um tipo de lista, ou matriz de variáveis, onde cada variável possui um
índice. Os valores podem ser de vários tipos.
Imagina que um array é uma caixa com várias outras caixas dentro e cada uma
contendo algum valor.
O array deve ser declarado entre colchetes "[]", e pode guardar qualquer valor
dentro de seus índices: inclusive outros arrays.
Ex: let array = ['string', 1, true, false, ['array1'], ['array2']...]
Obs: O índice só é acessado por uma número inteiro, onde 0 é o primeiro índice.
Cada índice é separado por vígula.

Manipulando Arrays
Ao ser declarado, o Array traz consigo uma série de métodos para manipulá-lo.
forEach() - itera um array;
push() - add item no final do array;
pop() - remove item no final do array;
shift() - remove item no início do array;
unshift() - add item no início do array;
indexOf() - retorna o índice de um valor;
splice() - remove ou substitui um item pelo índice;
slice() - retorna uma parte de um array existente;

OBJETOS
Dados que possuem propriedades e valores que definem suas características.
Deve ser declarado entre chave "{}".
Ex: var xicara = {
   cor: 'azul',
   tamanho: 'p',
   funcao: tomarCafe()
}
Manipulação
As propriedades de objetos podem ser atribuídas à variáveis, facilitando a
manipulação do objeto. Chamamos isso de desestruturação.
Ex: var xicara = {cor: 'azul', tamanho: 'p', funcao: tomarCafe()}
    var cor = xicara.cor;
    var tamanho = xicara.tamanho;
    var funcao = tomarCafe();
Outra forma de fazer desestruturação é utilizando chage ao declarar a variável.
Ex: var xicara = {cor: 'azul', tamanho: 'p', funcao: tomarCafe()}
    var { cor, tamanho, funcao } =  xicara;

Estruturas Condicionais
São instruções para realizar determinadas tarefas a partir de uma condição,
seja de decisão ou repetição;
Estrutura de decisão: Podemos usar as palavras reservadas "if" para estabelecer
uma condição. if(jogador1 > jogador2){ console.log("jogador1 ganhou.");}
              else if(jogador1 < jogador2) {console.log("jogador2 ganhou.");}
              else { console.logo("o jogo foi empate.");}
Ninho de if ou aninhamento de if: é quando existe um "if" dentro de outro "if".
if ternário: Faz uma verificação em uma única linha.
         Ex: [condição] ? [instrução1] : [instrução2];
   [jogador > 0] ? console.logo('marcou ponto') : console.logo('não marcou')
O "switch/case" funciona como uma estrutura condicional também;
   switch(${expressão}){
      case 1: ${instrução};
      brack;
      case 2: ${instrução};
      brack;
      case 3: ${instrução};
      brack;
   }

Estruturas de Repetição
São estruturas condicionais que repetem uma instrução até atingir determinada
condição: for; for/in; for/of; while; Do/while;
For: funciona como uam repetição de instrução até que a condição seja falsa.
for([expressãoInicial]; [condição]; [incremento]){ declaração }
For/in: funciona como uma repetição a partir de uma propriedade.
for([indice] in [objeto ou array]){ declaração }
For/of: funciona como uma repetição a partir d eum valor.
for([indice] of [array]){ declaração }
Não funciona com objetos, pois as propriedade variam, diferentes do índice em
um array que sempre serão números inteiros. Para isso, se torna necessário
passar a propriedade dentro da condição.
for(i of object.propriedade){ console.log(i);}
Porém, ele imprime cada letra em uma linha.
While: executa uma instrução "enquanto" determinada condição for verdadeira,
a verificação é feita antes da execução;
Do/While: executa uma instrução "até que" determinada condição seja falta, a
verificação é feita depois da execução;

Funções
São blocos de comandos e instruções para a execução de determinadas tarefas.
function nomeDaFuncao(){
   ${instrução};                    DECLARAR A FUNÇÃO
}
nomeDaFuncao()                      CHAMAR A FUNÇÃO
Geralmente se utiliza a palava reservada "function" seguida de parênteses "()"
e chaves "()".
Os parênteses "()": indica que é um objeto do tipo function;
As chaves "{}": indica que é um bloco de instrução;

Funções com Parâmetros
As Funções podem receber, em sua declaração, parâmetros que servem como
variáveis, onde sua atribuição pode ser feita durante a chamada da função.
function nomeDaFuncao(parametro){ ${instrucao};}
nomeDaFuncao(valorDoParametro);

Tipos de Funções
Declarativas: são funções que possuem o uso mais comum, deve ser declarada
usando a palavra reservada "function" seguida do nome da função, parênteses "()"
e chaves "{}".
Ex: function nomeDaFuncao(){
   ${instrucao};
}     // nome da função é obrigatório
Expressões de Funções: são funções atribuídas às expressões. A nomeação das
funções por expressão é opcional.
Ex1: var funcao = function nomeDaFuncao(){
   ${instrucao};
}
Ex2: var funcao = function(){
   ${instrucao};
};
Arrow Function: são funções de expressão de sintaxe curta. Arrow functions
sempre serão anônimas, e portanto não podem ser nomeadas. Deve ser declarada
com parênteses "()", seguido de "=>" e depois chaves "{}".
Ex: var funcao = () => {
   ${instrucao};
}
Funções Aritiméticas
Number() - para converter valores em números;
Prompt() - para registrar entradas de usuários;
Alert() - para mostrar mensagem ao usuário;
Template Strings - para usar strings junto com empressões;